client {
  akka {
    actor {
        provider = remote
        serializers {
            jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
        }
        serialization-bindings {
            "communication.JsonSerializable" = jackson-json
        }
        allow-java-serialization = true
      }
      remote {
        artery {
          enabled = on
          transport = tcp
          canonical.hostname = "127.0.0.1"
          canonical.port = 2000
        }
      }
  }
}

server1 {
  akka {
    actor {
        provider = remote
        serializers {
            jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
        }
        serialization-bindings {
            "communication.JsonSerializable" = jackson-json
        }
        allow-java-serialization = true
      }
      remote {
        artery {
          enabled = on
          transport = tcp
          canonical.hostname = "127.0.0.1"
          canonical.port = 1000
        }
      }
  }
}
server2 {
  akka {
    actor {
        provider = remote
        serializers {
            jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
        }
        serialization-bindings {
            "communication.JsonSerializable" = jackson-json
        }
        allow-java-serialization = true
      }
      remote {
        artery {
          enabled = on
          transport = tcp
          canonical.hostname = "127.0.0.1"
          canonical.port = 1001
        }
      }
  }
}

server3 {
  akka {
    actor {
        provider = remote
        serializers {
            jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
        }
        serialization-bindings {
            "communication.JsonSerializable" = jackson-json
        }
        allow-java-serialization = true
      }
      remote {
        artery {
          enabled = on
          transport = tcp
          canonical.hostname = "127.0.0.1"
          canonical.port = 1002
        }
      }
  }
}

masterService {
  akka {
    actor {
        provider = remote
        serializers {
            jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
        }
        serialization-bindings {
            "communication.JsonSerializable" = jackson-json
        }
        allow-java-serialization = true
      }
      remote {
        artery {
          enabled = on
          transport = tcp
          canonical.hostname = "127.0.0.1"
          canonical.port = 3000
        }
      }
  }
}

cli {
  akka {
    actor {
        provider = remote
        serializers {
            jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
        }
        serialization-bindings {
            "communication.JsonSerializable" = jackson-json
        }
        allow-java-serialization = true
      }
      remote {
        artery {
          enabled = on
          transport = tcp
          canonical.hostname = "127.0.0.1"
          canonical.port = 4000
        }
      }
  }
}

sqlite {
    db {
        slick.driver = scala.slick.driver.SQLiteDriver
        driver = org.sqlite.JDBC
        url = "jdbc:sqlite:database.db"
        connectionPool = HikariCP
        connectionTimeout = 10000
        connectionTestQuery= SELECT 1
    }
    numThreads=100
}
